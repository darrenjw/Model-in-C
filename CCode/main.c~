
#include "main.h"

     int
     main (void)
     {
struct_data data;
struct_para para;
struct_priors priors;
struct_MH MH;

        int burn,iter,thin,h,i,j,l,m,mm,mmm;
	const gsl_rng_type * T;
	gsl_rng * RNG;
	gsl_rng_env_setup ();
	T = gsl_rng_default;
	RNG = gsl_rng_alloc (T);
  	gsl_rng_set (RNG, 1); /*seed*/
	dataLMN("LMNmaxdata.txt",&data.L,&data.M,&data.N);
	datadouble("ydata.txt",data.y);
        datadouble("xdata.txt",data.x);
        dataint("NoORFdata.txt",data.NoORF);
        dataint("NoTIMEdata.txt",data.NoTIME);
	#include "data2.c"
	printheader(&data);
	/*start burn*/
	for (h=0;h<burn;h++){
		para.P=MCMC_base(RNG,&data,&para,&priors,&MH.accept_P,&MH.hP,para.P,MCMC_P,-999,-999);
		para.sigma_K_o=gamma_sample(RNG,&data,1,data.L,para.K_o_l,para.K_p,priors.eta_K_p,priors.psi_K_o);
		para.sigma_r_o=gamma_sample(RNG,&data,1,data.L,para.r_o_l,para.r_p,priors.eta_r_p,priors.psi_r_o);
		para.sigma_nu=gamma_sample(RNG,&data,1,data.L,para.nu_l,para.nu_p,priors.eta_nu_p,priors.psi_nu);	
		para.K_p=gauss_sample(RNG,&data,1,data.L,para.K_o_l,para.sigma_K_o,priors.K_mu,priors.eta_K_mu);
		para.r_p=gauss_sample(RNG,&data,1,data.L,para.r_o_l,para.sigma_r_o,priors.r_mu,priors.eta_r_mu);
		para.nu_p=gauss_sample(RNG,&data,1,data.L,para.nu_l,para.sigma_nu,priors.nu_mu,priors.eta_nu_mu);

		for (l=0;l<data.L;l++){
			para.tau_K_l[l]=gamma_sample(RNG,&data,(l*data.M+1),data.NoORF[l],para.K_lm,para.K_o_l[l],priors.sigma_K,priors.phi_K);
			para.tau_r_l[l]=gamma_sample(RNG,&data,(l*data.M+1),data.NoORF[l],para.r_lm,para.r_o_l[l],priors.sigma_r,priors.phi_r);
			para.K_o_l[l]=gauss_sample(RNG,&data,(l*data.M+1),data.NoORF[l],para.K_lm,para.tau_K_l[l],para.K_p,para.sigma_K_o);
			para.r_o_l[l]=gauss_sample(RNG,&data,(l*data.M+1),data.NoORF[l],para.r_lm,para.tau_r_l[l],para.r_p,para.sigma_r_o);
			para.nu_l[l]=MCMC_base(RNG,&data,&para,&priors,&MH.accept_nu,&MH.hnu,para.nu_l[l],MCMC_nu,l,-999);
			
			for (m=0;m<data.NoORF[l];m++){ 
				mm=l*data.M + m;
				para.K_lm[mm]=para.P+MCMC_base(RNG,&data,&para,&priors,&MH.accept_K,&MH.hK,para.K_lm[mm],MCMC_K_lm,l,m);
				para.r_lm[mm]=GSL_MIN(3.5,MCMC_base(RNG,&data,&para,&priors,&MH.accept_r,&MH.hr,para.r_lm[mm],MCMC_r_lm,l,m));
			}
		}
		}
/*end burn*/
	for (i=0;i<iter;i++){
	for (j=0;j<thin;j++){
		para.P=MCMC_base(RNG,&data,&para,&priors,&MH.accept_P,&MH.hP,para.P,MCMC_P,-999,-999);
		para.sigma_K_o=gamma_sample(RNG,&data,1,data.L,para.K_o_l,para.K_p,priors.eta_K_p,priors.psi_K_o);
		para.sigma_r_o=gamma_sample(RNG,&data,1,data.L,para.r_o_l,para.r_p,priors.eta_r_p,priors.psi_r_o);
		para.sigma_nu=gamma_sample(RNG,&data,1,data.L,para.nu_l,para.nu_p,priors.eta_nu_p,priors.psi_nu);	
		para.K_p=gauss_sample(RNG,&data,1,data.L,para.K_o_l,para.sigma_K_o,priors.K_mu,priors.eta_K_mu);
		para.r_p=gauss_sample(RNG,&data,1,data.L,para.r_o_l,para.sigma_r_o,priors.r_mu,priors.eta_r_mu);
		para.nu_p=gauss_sample(RNG,&data,1,data.L,para.nu_l,para.sigma_nu,priors.nu_mu,priors.eta_nu_mu);

		for (l=0;l<data.L;l++){
			para.tau_K_l[l]=gamma_sample(RNG,&data,(l*data.M+1),data.NoORF[l],para.K_lm,para.K_o_l[l],priors.sigma_K,priors.phi_K);
			para.tau_r_l[l]=gamma_sample(RNG,&data,(l*data.M+1),data.NoORF[l],para.r_lm,para.r_o_l[l],priors.sigma_r,priors.phi_r);
			para.K_o_l[l]=gauss_sample(RNG,&data,(l*data.M+1),data.NoORF[l],para.K_lm,para.tau_K_l[l],para.K_p,para.sigma_K_o);
			para.r_o_l[l]=gauss_sample(RNG,&data,(l*data.M+1),data.NoORF[l],para.r_lm,para.tau_r_l[l],para.r_p,para.sigma_r_o);
			para.nu_l[l]=MCMC_base(RNG,&data,&para,&priors,&MH.accept_nu,&MH.hnu,para.nu_l[l],MCMC_nu,l,-999);
			
			for (m=0;m<data.NoORF[l];m++){ 
				mm=l*data.M + m;
				para.K_lm[mm]=para.P+MCMC_base(RNG,&data,&para,&priors,&MH.accept_K,&MH.hK,para.K_lm[mm],MCMC_K_lm,l,m);
				para.r_lm[mm]=MCMC_base(RNG,&data,&para,&priors,&MH.accept_r,&MH.hr,para.r_lm[mm],MCMC_r_lm,l,m);
			}
		}
	}
	printdata(&data,&para,&MH);
	}
       	gsl_rng_free(RNG);
	return 0;
}
