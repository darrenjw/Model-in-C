#include "headers.h"
#include "functions.h"
#include "print.h"
/*Logistic Growth*/

double logistic_function(double t,double K, double r, double P){
	double output;
	output=(K*P*exp(r*t))/(K+P*(exp(r*t)-1));
	return(output);
}

double logistic_function_E(double t,double K, double r, double P){
	double output;
	output=logistic_function(t,exp(K), exp(r), exp(P));
	return(output);
}

/*Gibbs*/

double gauss_sample(gsl_rng *RNG, struct_data *D ,int start, int N,double x[],double tau,double mu_0,double tau_0){
	double vec,Ndouble,SUM=0;
	int i;
	Ndouble=N;
	for (i=start-1;i<(start+N-1);i++){SUM=SUM+x[i];}
	vec=(tau_0*mu_0+tau*SUM)/(tau_0+Ndouble*tau)+gsl_ran_gaussian(RNG,1/sqrt(tau_0+Ndouble*tau));
	return(vec);
}

/*MCMC MH*/

double MCMC_base(gsl_rng *RNG, struct_data *D,struct_para *D_para,struct_priors *D_priors,double *accept,double *h,double para,double (*foo)(struct struct_data *D,struct struct_para *D_para,struct struct_priors *D_priors,double,int,int,int),int c,int l, int m){
	double logu,logaprob,can;
	can=para+gsl_ran_gaussian(RNG,*h);
	logaprob=(*foo)(D,D_para,D_priors,can,c,l,m)-(*foo)(D,D_para,D_priors,para,c,l,m);

	logu=gsl_sf_log(1-gsl_rng_uniform(RNG));
	if (logaprob>logu){para=can;*accept=*accept+1;}
	return(para); 
	}

double MCMC_P(struct_data *D,struct_para *D_para,struct_priors *D_priors,double para,int c,int l, int m){
	double density,F,SUM=0;
	int n,mm,nn;
	for (c=0;c<2;c++){
	for (l=0;l<D->L;l++){
        	for (m=0;m<D->NoORF[l+D->L*c];m++){
			mm=c*D->L+D->NoSUM[l+c*D->L]+m;
			for (n=0;n<D->NoTIME[mm];n++){
				nn=c*D->SHIFTlmn+l*D->M*D->N + m*D->N + n;
				F=logistic_function_E(D->x[nn],D_para->K_lm[mm], D_para->r_lm[mm],para);
				SUM=SUM+F*(F-2*D->y[nn])*exp(D_para->nu_l[l])*exp(D_para->upsilon_c[c]);
			}
		}
	}
	}
	density=para*( para -2*D_priors->P_mu )*D_priors->eta_P_mu+SUM;
	return(-0.5*density); 
}

double MCMC_nu(struct_data *D,struct_para *D_para,struct_priors *D_priors,double para,int c,int l, int m){
	double density,F,SUM=0;
	int n,mm,nn;
	for (c=0;c<2;c++){
	for (m=0;m<D->NoORF[c*D->L+l];m++){
		mm=c*D->L+D->NoSUM[l+c*D->L]+m;
		for (n=0;n<D->NoTIME[mm];n++){
			nn=c*D->SHIFTlmn+l*D->M*D->N + m*D->N+n;
			F=logistic_function_E(D->x[nn],D_para->K_lm[mm], D_para->r_lm[mm],D_para->P);
			SUM=SUM+(D->y[nn]-F)*(D->y[nn]-F)*exp(para)*exp(D_para->upsilon_c[c])-para;
		}
	}
	}
	density=para*( para -2*D_para->nu_p )*D_para->sigma_nu+SUM; 
	return(-0.5*density); 
}

double MCMC_sigma_nu(struct_data *D,struct_para *D_para,struct_priors *D_priors,double para,int c,int l, int m){
	double density,SUM=0;
	for (l=0;l<D->L;l++){
		SUM=SUM-para+(D_para->nu_l[l]-D_para->nu_p)*(D_para->nu_l[l]-D_para->nu_p)*exp(para);
	}	
	density=para*(para-2*D_priors->eta_nu_p)*D_priors->psi_nu+SUM; 
	return(-0.5*density); 
}


double MCMC_K_lm(struct_data *D,struct_para *D_para,struct_priors *D_priors,double para,int c,int l, int m){
	double density,F,SUM=0;
	int n,mm,nn;
	mm=c*D->L+D->NoSUM[l+c*D->L]+m;
	for (n=0;n<D->NoTIME[mm];n++){
		nn=c*D->SHIFTlmn+l*D->M*D->N + m*D->N+n;
		F=logistic_function_E(D->x[nn],para, D_para->r_lm[mm],D_para->P);
		SUM=SUM+F*(F-2*D->y[nn])*exp(D_para->nu_l[l])*exp(D_para->upsilon_c[c]);
	}	
	density=para*(para-2*D_para->K_o_l[l])*D_para->tau_K_l[c*D->L+l]+SUM; 
	return(-0.5*density);
}

double MCMC_r_lm(struct_data *D,struct_para *D_para,struct_priors *D_priors,double para,int c,int l, int m){
	double density,F,SUM=0;
	int n,mm,nn;
	mm=c*D->L+D->NoSUM[l+c*D->L]+m;
	for (n=0;n<D->NoTIME[mm];n++){
		nn=c*D->SHIFTlmn+l*D->M*D->N + m*D->N+n;
		F=logistic_function_E(D->x[nn], D_para->K_lm[mm],para,D_para->P);	
		SUM=SUM+F*(F-2*D->y[nn])*exp(D_para->nu_l[l])*exp(D_para->upsilon_c[c]);
	}	
	density=para*(para-2*D_para->r_o_l[l])*D_para->tau_r_l[c*D->L+l]+SUM; 
	return(-0.5*density); 
}

double MCMC_K_o_l(struct_data *D,struct_para *D_para,struct_priors *D_priors,double para,int c,int l, int m){
	double density,F,SUM=0;
	int ll,mm;
 for (m=0;m<D->NoORF[l+D->L];m++){
	mm=D->L+D->NoSUM[l+D->L]+m;
	ll=D->L+l;
F=exp(D_para->alpha[1])*(para+D_para->delta[l]*D_para->gamma[l])*exp(D_para->tau_K_l[ll]);
SUM=SUM+F*(F-2*D_para->K_lm[mm]);
	}	
	density=para*(para-2*D_para->K_p)*D_para->sigma_K_o+SUM; 
	return(-0.5*density);
}

double MCMC_r_o_l(struct_data *D,struct_para *D_para,struct_priors *D_priors,double para,int c,int l, int m){
	double density,F,SUM=0;
	int ll,mm;
 for (m=0;m<D->NoORF[l+D->L];m++){
	mm=D->L+D->NoSUM[l+D->L]+m;
	ll=D->L+l;
F=exp(D_para->beta[2])*(para+D_para->delta[l]*D_para->omega[l])*exp(D_para->tau_r_l[ll]);
SUM=SUM+F*(F-2*D_para->r_lm[mm]);
	}	
	density=para*(para-2*D_para->r_p)*D_para->sigma_r_o+SUM; 
	return(-0.5*density);
}

double MCMC_alpha(struct_data *D,struct_para *D_para,struct_priors *D_priors,double para,int c,int l, int m){
	double density,F,SUM=0;
	int mm;
	for (l=0;l<D->L;l++){
 		for (m=0;m<D->NoORF[l+D->L];m++){
			mm=D->L+D->NoSUM[l+D->L]+m;
			F=exp(para)*(D_para->K_o_l[l]+D_para->delta[l]*D_para->gamma[l]);
			SUM=SUM+F*(F-2*D_para->K_lm[mm])*exp(D_para->tau_K_l[D->L+l]);
		}
	}	
	density=para*(para-2*D_priors->alpha_mu)*D_priors->eta_alpha+SUM; 

	return(-0.5*density); 
}

double MCMC_beta(struct_data *D,struct_para *D_para,struct_priors *D_priors,double para,int c,int l, int m){
	double density,F,SUM=0;
	int mm;
	for (l=0;l<D->L;l++){
 		for (m=0;m<D->NoORF[l+D->L];m++){
			mm=D->L+D->NoSUM[l+D->L]+m;
			F=exp(para)*(D_para->r_o_l[l]+D_para->delta[l]*D_para->omega[l]);
			SUM=SUM+F*(F-2*D_para->r_lm[mm])*exp(D_para->tau_r_l[D->L+l]);
		}
	}		
	density=para*(para-2*D_priors->beta_mu)*D_priors->eta_beta+SUM; 
	return(-0.5*density); 
}

double aug_delta(gsl_rng *RNG,struct_data *D,struct_para *D_para,struct_priors *D_priors,int l){
	double u,para,SUMa=0,SUMb=0;
	int m,ll,mm;
        for (m=0;m<D->NoORF[l+D->L];m++){
	mm=D->L+D->NoSUM[l+D->L]+m;
	ll=D->L+l;
SUMa=SUMb+D_priors->p*(gsl_ran_gaussian_pdf(D_para->K_lm[mm]-exp(D_para->alpha[1])*(D_para->K_o_l[l]+D_para->gamma[l]),1/sqrt(exp(D_para->tau_K_l[ll])))+       gsl_ran_gaussian_pdf(D_para->K_lm[mm]-exp(D_para->beta[2])*(D_para->r_o_l[l]+D_para->omega[l]),1/sqrt(exp(D_para->tau_r_l[ll]))));
SUMa=SUMb+(1-D_priors->p)*(gsl_ran_gaussian_pdf(D_para->K_lm[mm]-exp(D_para->alpha[1])*(D_para->K_o_l[l]),1/sqrt(exp(D_para->tau_K_l[ll])))+ 			           gsl_ran_gaussian_pdf(D_para->K_lm[mm]-exp(D_para->beta[2])*(D_para->r_o_l[l]),1/sqrt(exp(D_para->tau_r_l[ll]))));
	}	
	u=gsl_rng_uniform(RNG);
	if (u>(SUMa/(SUMa+SUMb))){para=1;}	
	else para=0;
	return(para); 
}

double MCMC_gamma(struct_data *D,struct_para *D_para,struct_priors *D_priors,double para,int c,int l, int m){
	double density,SUM=0;
	int ll=D->L+l;
	for (m=0;m<D->NoORF[l];m++){
		SUM=SUM+exp(D_para->alpha[1])*(D_para->K_o_l[l]+D_para->delta[l]*para)*exp(D_para->tau_K_l[ll]);
	}	
	density=para*para*D_para->sigma_gamma+SUM; 
	return(-0.5*density); 
}

double MCMC_omega(struct_data *D,struct_para *D_para,struct_priors *D_priors,double para,int c,int l, int m){
	double density,SUM=0;
	int ll=D->L+l;
	for (m=0;m<D->NoORF[l];m++){
		SUM=SUM+exp(D_para->beta[2])*(D_para->r_o_l[l]+D_para->delta[l]*para)*exp(D_para->tau_r_l[ll]);
	}	
	density=para*para*D_para->sigma_omega+SUM; 
	return(-0.5*density); 
}

double MCMC_sigma_gamma(struct_data *D,struct_para *D_para,struct_priors *D_priors,double para,int c,int l, int m){
	double density,SUM=0;
	for (l=0;l<D->L;l++){
		SUM=SUM-para+D_para->gamma[l]*D_para->gamma[l]*exp(para);
	}	
	density=para*(para-2*D_priors->eta_gamma)*D_priors->psi_gamma+SUM; 
	return(-0.5*density); 
}

double MCMC_sigma_omega(struct_data *D,struct_para *D_para,struct_priors *D_priors,double para,int c,int l, int m){
	double density,SUM=0;
	for (l=0;l<D->L;l++){
		SUM=SUM-para+D_para->omega[l]*D_para->omega[l]*exp(para);
	}	
	density=para*(para-2*D_priors->eta_omega)*D_priors->psi_omega+SUM; 
	return(-0.5*density); 
}

double MCMC_upsilon_c(struct_data *D,struct_para *D_para,struct_priors *D_priors,double para,int c,int l, int m){
	double density,F,SUM=0;
	int n,mm,nn;
	for (l=0;l<D->L;l++){
        	for (m=0;m<D->NoORF[l+D->L*c];m++){
			mm=c*D->L+D->NoSUM[l+c*D->L]+m;
			for (n=0;n<D->NoTIME[mm];n++){
				nn=c*D->SHIFTlmn+l*D->M*D->N + m*D->N + n;
				F=logistic_function_E(D->x[nn],D_para->K_lm[mm], D_para->r_lm[mm],D_para->P);
				SUM=SUM-para+(D->y[nn]-F)*(D->y[nn]-F)*exp(para)*exp(D_para->nu_l[l]);
		}
	}
	}
	density=para*( para -2*D_para->upsilon_p )*D_para->sigma_upsilon+SUM; 
	return(-0.5*density); 
}

double MCMC_sigma_upsilon(struct_data *D,struct_para *D_para,struct_priors *D_priors,double para,int c,int l, int m){
	double density,SUM=0;
	for (c=0;c<2;c++){
		SUM=SUM-para+(D_para->upsilon_c[c]-D_para->upsilon_p)*(D_para->upsilon_c[c]-D_para->upsilon_p)*exp(para);
	}	
	density=para*(para-2*D_priors->eta_upsilon)*D_priors->phi_upsilon+SUM; 
	return(-0.5*density); 
}

double MCMC_sigma_K_o(struct_data *D,struct_para *D_para,struct_priors *D_priors,double para,int c,int l, int m){
	double density,SUM=0;
	for (l=0;l<D->L;l++){
		SUM=SUM-para+(D_para->K_o_l[l]-D_para->K_p)*(D_para->K_o_l[l]-D_para->K_p)*exp(para);
	}	
	density=para*(para-2*D_priors->sigma_K)*D_priors->phi_K+SUM; 
	return(-0.5*density); 
}

double MCMC_sigma_r_o(struct_data *D,struct_para *D_para,struct_priors *D_priors,double para,int c,int l, int m){
	double density,SUM=0;
	for (l=0;l<D->L;l++){
		SUM=SUM-para+(D_para->r_o_l[l]-D_para->r_p)*(D_para->r_o_l[l]-D_para->r_p)*exp(para);
	}	
	density=para*(para-2*D_priors->sigma_r)*D_priors->phi_r+SUM; 
	return(-0.5*density); 
}

double MCMC_tau_K_l(struct_data *D,struct_para *D_para,struct_priors *D_priors,double para,int c,int l, int m){
	double density,SUM=0;
	int mm;
	for (m=0;m<D->NoORF[l+D->L*c];m++){
		mm=c*D->L+D->NoSUM[l+c*D->L]+m;
		SUM=SUM-para+(D_para->K_lm[mm]-
exp(D_para->alpha[1])*(D_para->K_o_l[l]+c*D_para->delta[l]*D_para->gamma[l]))*(D_para->K_lm[mm]-
exp(D_para->alpha[1])*(D_para->K_o_l[l]+c*D_para->delta[l]*D_para->gamma[l]))*exp(para);
	}	
	density=para*(para-2*D_priors->eta_K_p)*D_priors->psi_K_o+SUM; 
	return(-0.5*density); 
}

double MCMC_tau_r_l(struct_data *D,struct_para *D_para,struct_priors *D_priors,double para,int c,int l, int m){
	double density,SUM=0;
	int mm;
	for (m=0;m<D->NoORF[l+D->L*c];m++){
		mm=c*D->L+D->NoSUM[l+c*D->L]+m;
		SUM=SUM-para+(D_para->r_lm[mm]-
exp(D_para->beta[2])*(D_para->r_o_l[l]+c*D_para->delta[l]*D_para->omega[l]))*(D_para->r_lm[mm]-
exp(D_para->beta[2])*(D_para->r_o_l[l]+c*D_para->delta[l]*D_para->omega[l]))*exp(para);
	}	
	density=para*(para-2*D_priors->eta_r_p)*D_priors->psi_r_o+SUM; 
	return(-0.5*density); 
}


/*Gibbs and MH steps*/

int gibbsandMHloop(int iter,int thin,gsl_rng *RNG,struct_data *D,struct_para *D_para,struct_priors *D_priors ,struct_MH *D_MH,int print){
int i,j,l,m,mm,c,cc;
	for (i=0;i<iter;i++){
	for (j=0;j<thin;j++){
	/*	D_para->P=MCMC_base(RNG,D,D_para,D_priors,&D_MH->accept_P,&D_MH->hP,D_para->P,MCMC_P,-999,-999,-999);
*/
		D_para->alpha[1]=MCMC_base(RNG,D,D_para,D_priors,&D_MH->accept_K,&D_MH->hK,D_para->alpha[1],MCMC_alpha,-999,-999,-999);

	/*	D_para->beta[1]=MCMC_base(RNG,D,D_para,D_priors,&D_MH->accept_K,&D_MH->hK,D_para->beta[1],MCMC_beta,-999,-999,-999);
		D_para->sigma_gamma=MCMC_base(RNG,D,D_para,D_priors,&D_MH->accept_K,&D_MH->hK,D_para->sigma_gamma,MCMC_sigma_gamma,-999,-999,-999);
		D_para->sigma_omega=MCMC_base(RNG,D,D_para,D_priors,&D_MH->accept_K,&D_MH->hK,D_para->sigma_omega,MCMC_sigma_omega,-999,-999,-999);

		D_para->sigma_upsilon=MCMC_base(RNG,D,D_para,D_priors,&D_MH->accept_K,&D_MH->hK,D_para->sigma_upsilon,MCMC_sigma_upsilon,-999,-999,-999);
		D_para->sigma_nu=MCMC_base(RNG,D,D_para,D_priors,&D_MH->accept_K,&D_MH->hK,D_para->sigma_nu,MCMC_sigma_nu,-999,-999,-999);

		D_para->sigma_K_o=MCMC_base(RNG,D,D_para,D_priors,&D_MH->accept_K,&D_MH->hK,D_para->sigma_K_o,MCMC_sigma_K_o,-999,-999,-999);
		D_para->sigma_r_o=MCMC_base(RNG,D,D_para,D_priors,&D_MH->accept_K,&D_MH->hK,D_para->sigma_r_o,MCMC_sigma_r_o,-999,-999,-999);	
		D_para->K_p=gauss_sample(RNG,D,1,D->L,D_para->K_o_l,D_para->sigma_K_o,D_priors->K_mu,D_priors->eta_K_mu);
		D_para->r_p=gauss_sample(RNG,D,1,D->L,D_para->r_o_l,D_para->sigma_r_o,D_priors->r_mu,D_priors->eta_r_mu);
		D_para->nu_p=gauss_sample(RNG,D,1,D->L,D_para->nu_l,D_para->sigma_nu,D_priors->nu_mu,D_priors->eta_nu_mu);

D_para->upsilon_p=gauss_sample(RNG,D,1,2,D_para->upsilon_c,D_para->sigma_upsilon,D_priors->upsilon_mu,D_priors->eta_upsilon_mu);

D_para->upsilon_c[0]=MCMC_base(RNG,D,D_para,D_priors,&D_MH->accept_K,&D_MH->hK,D_para->upsilon_c[0],MCMC_upsilon_c,0,-999,-999);
D_para->upsilon_c[1]=MCMC_base(RNG,D,D_para,D_priors,&D_MH->accept_K,&D_MH->hK,D_para->upsilon_c[1],MCMC_upsilon_c,1,-999,-999);
*/
		for (l=0;l<D->L;l++){
/*			D_para->K_o_l[l]=MCMC_base(RNG,D,D_para,D_priors,&D_MH->accept_nu,&D_MH->hnu,D_para->K_o_l[l],MCMC_K_o_l,-999,l,-999);
			D_para->r_o_l[l]=MCMC_base(RNG,D,D_para,D_priors,&D_MH->accept_nu,&D_MH->hnu,D_para->r_o_l[l],MCMC_r_o_l,-999,l,-999);
			D_para->nu_l[l]=MCMC_base(RNG,D,D_para,D_priors,&D_MH->accept_nu,&D_MH->hnu,D_para->nu_l[l],MCMC_nu,-999,l,-999);

D_para->gamma[l]=MCMC_base(RNG,D,D_para,D_priors,&D_MH->accept_nu,&D_MH->hnu,D_para->gamma[l],MCMC_gamma,-999,l,-999);
D_para->omega[l]=MCMC_base(RNG,D,D_para,D_priors,&D_MH->accept_nu,&D_MH->hnu,D_para->omega[l],MCMC_omega,-999,l,-999);
D_para->delta[l]=aug_delta(RNG,D,D_para,D_priors,l);
*/				
for (c=0;c<2;c++){
cc=l+c*D->L;
/*			D_para->tau_K_l[cc]=MCMC_base(RNG,D,D_para,D_priors,&D_MH->accept_nu,&D_MH->hnu,D_para->tau_K_l[cc],MCMC_tau_K_l,c,l,-999);
			D_para->tau_r_l[cc]=MCMC_base(RNG,D,D_para,D_priors,&D_MH->accept_nu,&D_MH->hnu,D_para->tau_K_l[l],MCMC_tau_K_l,c,l,-999);
*/
			for (m=0;m<D->NoORF[l];m++){ 
				mm=l*D->M + m +c*D->SHIFTmn;
/*				D_para->K_lm[mm]=MCMC_base(RNG,D,D_para,D_priors,&D_MH->accept_K,&D_MH->hK,D_para->K_lm[mm],MCMC_K_lm,c,l,m);
				D_para->r_lm[mm]=MCMC_base(RNG,D,D_para,D_priors,&D_MH->accept_r,&D_MH->hr,D_para->r_lm[mm],MCMC_r_lm,c,l,m);*/
			}
			}
		}
	}
  printf ("%g ",D_para->alpha[1]);
  printf ("%g ",D_para->beta[1]);
  printf ("%g ",D_para->K_p);
  printf ("%g ",D_para->P);
  printf ("\n");
	/*if (print==1){printdata(D,D_para,D_MH);}*/
	}
return 0;
}


/*DATA IN*/


int datadouble(char filename[], char filename2[], double datavec[] )
{
  int i;
  char number[20];
  double data;
  FILE *file;
  FILE *file2;
  file=fopen(filename, "r");
  i=0;
  if ( file != NULL )
    {
     fscanf(file, "%s %lf",number,&data);
      while ( fscanf(file, "%s %lf",number,&data)!=-1)
        {
        datavec[i]=data;   
 i++;
        }
    }
  else
    {
      perror(filename);
    }
  fclose(file);
  file2=fopen(filename2, "r");
   if ( file != NULL )
    {
     fscanf(file2, "%s %lf",number,&data);
      while ( fscanf(file2, "%s %lf",number,&data)!=-1)
        {
          datavec[i]=data;
	  i++;
        }
    }
  else
    {
      perror(filename2);
    }
  fclose(file2);

  return 0;
}





int dataint(char filename[],char filename2[], int datavec[] )
{
  int i;
  char number[20];
  double data;
  FILE *file;
  FILE *file2;
  file = fopen(filename, "r");
  i=0;
  if ( file != NULL )
    {
     fscanf(file, "%s %lf",number,&data);
      while ( fscanf(file, "%s %lf",number,&data)!=-1)
        {
          datavec[i]=data;
	  i++;
        }
    }
  else
    {
      perror(filename);
    }
  fclose(file);

file2 = fopen(filename, "r");
  if ( file2 != NULL )
    {
     fscanf(file2, "%s %lf",number,&data);
      while ( fscanf(file2, "%s %lf",number,&data)!=-1)
        {
          datavec[i]=data;
	  i++;
        }
    }
  else
    {
      perror(filename2);
    }
  fclose(file2);
  return 0;
}

int dataLMN(char filename[], int *datavecL,int *datavecM,int *datavecN)
{
  int i;
  char number[20];
  double data;
  FILE *file = fopen(filename, "r");
  i=0;
  if ( file != NULL )
    {
     fscanf(file, "%s %lf",number,&data);
     fscanf(file, "%s %lf",number,&data);
     *datavecL=data;     
     fscanf(file, "%s %lf",number,&data);
     *datavecM=data;
     fscanf(file, "%s %lf",number,&data);
     *datavecN=data;
    }
  else
    {
      perror(filename);
    }
  fclose(file);
  return 0;
}

/*Data In*/

int fillMH(struct_MH *MH)
{
	MH->hK=0.1;      MH->accept_K=0;
	MH->hr=0.1;      MH->accept_r=0;
	MH->hnu=0.5;     MH->accept_nu=0;
	MH->hP=0.01;     MH->accept_P=0;  /*h sd; accept=0*/
  return 0;
}

int filldata(struct_data *D)
{
	int l;
	l=1;

	D->NoSUM[0]=0;
	for (l=1;l<(D->L);l++){
	  D->NoSUM[l]=D->NoSUM[l-1]+D->NoORF[l-1];
	}

	D->NoSUM[D->L]=0;
	for (l=(1+D->L);l<(2*D->L);l++){
	  D->NoSUM[l]=D->NoSUM[l-1]+D->NoORF[l-1];
	}

	D->SHIFTmn=D->NoSUM[D->L];/*create mnSHIFT*/
  return 0;
}

int fillpara(struct_para *D_para, struct_data *D)
{
int c,l,m,mm;
	/*initials*/
	/*K*/
	for (c=0;c<2;c++){
	for (l=0;l<D->L;l++){
	for (m=0;m<D->NoORF[D->L*c+l];m++){
	    mm=c*D->SHIFTmn+D->NoSUM[c*D->L+l]+m;
	    D_para->K_lm[mm]=D->y[c*D->SHIFTlmn+l*D->M*D->N + m*D->N + D->NoTIME[mm]-1];
	    if(D_para->K_lm[mm]>0){D_para->K_lm[mm]=gsl_sf_log(D_para->K_lm[mm]);}
	  }}}
	for (l=0;l<2*D->L;l++)          {D_para->tau_K_l[l]=2.2;}                  /*Precision*/

	for (l=0;l<D->L;l++)          {D_para->K_o_l[l]=gsl_sf_log(0.1);}        /*LMean*/
	D_para->sigma_K_o=1;               /*Precision*/
	D_para->K_p=gsl_sf_log(0.1);       /*LMean*/

	/*r*/
	for (l=0;l<D->L;l++){
	for (m=0;m<D->NoORF[l];m++){
		mm=c*D->SHIFTmn+D->NoSUM[c*D->L+l]+m;
		D_para->r_lm[mm]=gsl_sf_log(2.5);
		}}                          /*LMean*/

	for (l=0;l<2*D->L;l++)          {D_para->tau_r_l[l]=0.7;}                  /*Precision*/

	for (l=0;l<D->L;l++)          {D_para->r_o_l[l]=gsl_sf_log(2.5);}        /*LMean*/
	D_para->sigma_r_o=1;               /*Precision*/

	D_para->r_p=gsl_sf_log(2.5);       /*LMean*/

	/*nu*/
	for (l=0;l<D->L;l++)          {D_para->nu_l[l]=18;}                      /*LMean*/
	D_para->sigma_nu=0.0025;   /*Precision for lMean*/

	D_para->nu_p=18;   /*LMean*/
	/*P*/
	D_para->P=gsl_sf_log(0.0001);      /*LMean*/
for (l=0;l<D->L;l++)          {D_para->gamma[l]=0;} 

for (l=0;l<D->L;l++)          {D_para->omega[l]=0;}
for (l=0;l<D->L;l++)          {D_para->delta[l]=1;}  
 
 D_para->alpha[0]=gsl_sf_log(1);
   D_para->beta[0]=gsl_sf_log(1);
 D_para->alpha[1]=gsl_sf_log(1);
    D_para->beta[1]=gsl_sf_log(1);  
 D_para->sigma_gamma=1;
    D_para->sigma_omega=1;
    D_para->upsilon_c[0]=1; 
    D_para->upsilon_c[1]=1;       D_para->sigma_upsilon=1;
    D_para->upsilon_p=1;


  return 0;
}

int fillpriors(struct_priors *D_priors)
{
	/*Priors*/
	/*K*/
	D_priors->sigma_K=1;               D_priors->phi_K=500;               /*Gamma  Shape; Scale */
	D_priors->eta_K_p=1;               D_priors->psi_K_o=500;             /*Gamma  Shape; Scale */
	/*r*/
	D_priors->sigma_r=1;               D_priors->phi_r=500;               /*Gamma  Shape; Scale */
	D_priors->eta_r_p=1;               D_priors->psi_r_o=500;             /*Gamma  Shape; Scale */
	/*nu*/
	D_priors->eta_nu_p=1;              D_priors->psi_nu=500;              /*Gamma  Shape; Scale */

	/*K*//*r*//*nu*//*P*/
	D_priors->K_mu=gsl_sf_log(0.2192928);      D_priors->eta_K_mu=1;      /*Normal  LMean; Precisions */
	D_priors->r_mu=gsl_sf_log(2.5);            D_priors->eta_r_mu=1;      /*Normal  LMean; Precisions */
	D_priors->nu_mu=gsl_sf_log(31);            D_priors->eta_nu_mu=1;     /*Normal  LMean; Precisions */
	D_priors->P_mu=gsl_sf_log(0.0001);         D_priors->eta_P_mu=1/25;   /*Normal  LMean; Precisions */
	/*data2.c*/       

    D_priors->alpha_mu=gsl_sf_log(1);              D_priors->eta_alpha=500;
    D_priors->beta_mu=gsl_sf_log(1);               D_priors->eta_beta=500;
    D_priors->p=0.1;    
    D_priors->eta_gamma=1;              D_priors->psi_gamma=500;
    D_priors->eta_omega=1;              D_priors->psi_omega=500;
    D_priors->eta_upsilon=1;	        D_priors->phi_upsilon=500;	    
    D_priors->upsilon_mu=1;             D_priors->eta_upsilon_mu=500;


  return 0;
}








